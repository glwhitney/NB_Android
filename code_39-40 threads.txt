Android Development Tutorial 39 and 40 - Threads

***** Tutorial Notes
//Overview//
Threads are tasks that Android processes by time sharing with all the other processes. This multitasking gives the appearance that, the Activity you are interfacing with, is the only process being performed. Activities should perform time consuming tasks within Threads.

When your Launcher Activity starts it becomes the main thread for your App. The primary purpose of this thread is to display the UI and respond to user interaction. The UI can become un responsive If you perform a task in the main thread that takes time. Android monitors this and may stop the Activity because it has become unresponsive. The solution is launch a Thread from within your main thread and put the time consuming task inside the new thread.

These sub threads must never directly make changes to the UI. They can however work with an interface called a Thread Handler. A Thread Handler has a handleMessage() callback method that the sub thread can communicate with.

** 39 - Threads
First we are going to create an Activity that breaks the rules about consuming too much time and interfacing directly with the UI.

NOTE: I never got an "Activity Not Responding" error dialog while running on a AVD. So I added a second button to demonstrate that the screen was not responding.

1. Start a new project with an Empty Activity.
	a. Delete Hello World and add buckysText
	b. Add buckysButton with onClick set to clickBuckyButton.
	c. I added a second button
2. In Main.java
	a. Create the clickBuckyButton method after the Activitys onCreate method.
	b. Create a method that is going to waste some time. 
		i. Set a variable that is 10 seconds in the future
		ii. Synchronize your task so it doesn’t hold other tasks up.
		iii. Use a While loop that lasts 10 seconds by repeatedly getting the current time and comparing it to your future time variable. // Breaking the first rule.
		iv. Change the text on buckysText. // Breaking the second rule.
3. Run the App.
	a. Click the first button and wait 10 seconds for the text to change.
	b. Click the second button, Text Changes immediately
	c. Click the first button and then click the second button. Nothing happens to the appearance of the second button and the text won't update until the 10 seconds are up.

NOTE: You may get an Activity Not Responding error dialog on a real device.


**40 - Thread Handlers
Use existing files Note the only change to the layout is I changed the TextView's default text.
1. Optional, change to the layout's TextView default text
2. Adhere to Rule 1 by running the code that takes a long time in a Runnable instance of the Runnable class. Then pass the runnable to the Thread.
	a. Make a Runnable at the top of the button Listener
	b. Cut the while futureTime code and the futureTime variable  and paste them in the runnable run() method.
	c. Make a new Thread and pass the runnable.
	d. Start the thread.
3. Run the App and you can immediately click the second button.
4. Adhere to Rule two, "Thread shall not update UI" by creating a message handler.
	a. Import  android.os.Handler and  android.os.Message
	b. Create an android:os handler to update the text when the thread is done. I put mine after the onCreate.
	c. Alt-Insert the override method handleMsg()
	d. Move the Textview update to the handler 
	e. Add the Handler.sendEmptyMessage(0); after the while loop to call the handler.
5. Run the App again, click the first button then the second button. Now wait for the Thread to finish.

NOTE: Commented Out Code
I added some code to log data about the thread. Therefore it is commented out in the MainActivity.java #40 With Thread below.

NOTE: We are not sending a message here because of Thread isn't really processing anything for the Activity. If we were we would use sendMessage() instead of sendEmptyMessage().Also the Runnable would have to obtain a Message object, create a new bundle and use the SendMessage(Bundle) instead. The handler would get the message, unpack the Bundle and update the UI. I put an example at the end of the tutorial code.

***** manifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.thenewboston.lauren">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

***** MainActivity.java #39 No Thread
package com.thenewboston.lauren;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity {
    TextView buckysText;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        buckysText = (TextView) findViewById(R.id.buckysText);
    }

    public void firstClicked(View view){
        long futureTime = (System.currentTimeMillis()+ 10000);//10 sec
        buckysText.setText("UI waiting");// You will never see this because the while prevents the screen from refreshing

        while (System.currentTimeMillis()< futureTime){
            // Sync with any other threads that might be calling System.currentTimeMillis(
            synchronized(this){
                try {
                    wait(futureTime - System.currentTimeMillis());
                }catch(Exception e){}
            }
        }
        buckysText.setText("10 seconds are up");// You will se this if the second button isn't clicked within the 10 seconds
    }

    public void quickClicked(View view){
        buckysText = (TextView) findViewById(R.id.buckysText);
        buckysText.setText("Second Button Touched");
    }
}

***** activity_main.xml #39 No Thread
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context="com.thenewboston.lauren.MainActivity"
    android:id="@+id/mainLayout">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textAppearance="?android:attr/textAppearanceLarge"
        android:text="Screen will not respond or refresh for 10 sec after first button is clicked"
        android:id="@+id/buckysText"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="99dp" />

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="First Touch Me"
        android:id="@+id/firstButton"
        android:layout_centerVertical="true"
        android:layout_centerHorizontal="true"
        android:onClick="firstClicked" />

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Quickly Touch Me"
        android:id="@+id/quickButton"
        android:layout_below="@+id/firstButton"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="68dp"
        android:onClick="quickClicked" />
</RelativeLayout>

***** MainActivity.java #40 With Thread
package com.thenewboston.lauren;

import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
//import android.util.Log;
import android.view.View;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity {
    TextView buckysText;
//    long startTime, endTime, duration;
//    private static final String TAG = "MyServicesLog";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        buckysText = (TextView) findViewById(R.id.buckysText);
    }
    Handler waitMsgHandler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            buckysText.setText("Thread Complete");
//            endTime = System.currentTimeMillis();
  //          Log.i("MyThreadLog", "End Time = " + endTime);
  //          duration = (endTime - startTime);
  //          Log.i("MyThreadLog", "Duration = " + duration/1000 + " milliseconds" );
        }
    };

    public void firstClicked(View view){
        buckysText.setText("Starting Thread");// You will see this if you use a Message Handler

        Runnable r = new Runnable() {
            @Override
            public void run() {
                long futureTime = (System.currentTimeMillis()+ 10000);//10 sec
//                startTime = System.currentTimeMillis();
//                Log.i("MyThreadLog", "Start Time = " + startTime);

                while (System.currentTimeMillis()< futureTime){
                    // Sync with any other threads that might be calling System.currentTimeMillis(
                    synchronized(this){
                        try {
                            wait(futureTime - System.currentTimeMillis());
                        }catch(Exception e){}
                    }
                }
                waitMsgHandler.sendEmptyMessage(0);
            }
        };

        Thread waitThread = new Thread(r);
        waitThread.start();
    }

    public void quickClicked(View view){
        buckysText = (TextView) findViewById(R.id.buckysText);
        buckysText.setText("Second Button Touched\nWait for it ...");
    }
}


***** activity_main.xml #40 With Thread
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context="com.thenewboston.lauren.MainActivity"
    android:id="@+id/mainLayout">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textAppearance="?android:attr/textAppearanceLarge"
        android:text="Using a Thread\nScreen will now be responsive after first button is clicked"
        android:id="@+id/buckysText"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="99dp" />

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="First Touch Me"
        android:id="@+id/firstButton"
        android:layout_centerVertical="true"
        android:layout_centerHorizontal="true"
        android:onClick="firstClicked" />

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Quickly Touch Me"
        android:id="@+id/quickButton"
        android:layout_below="@+id/firstButton"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="68dp"
        android:onClick="quickClicked" />
</RelativeLayout>


***** Message Example
//Runnable//
Runnable runnable = new Runnable() {
	public void run() {
		Message msg = handler.obtainMessage();
		Bundle bundle = new Bundle();
		String newText = "Thread Complete";
		bundle.putString("threadResults", newText); 
		msg.setData(bundle);
	 	handler.sendMessage(msg);
	}
 };
 Thread myThread = new Thread(runnable);
 myThread.start();

//Handler//
Handler handler = new Handler() {
	 @Override public void handleMessage(Message msg) {
		Bundle bundle = msg.getData();
		String string = bundle.getString("threadResults"); 
		TextView myTextView = (TextView)findViewById(R.id.myTextView);
		myTextView.setText(string);
	}
};